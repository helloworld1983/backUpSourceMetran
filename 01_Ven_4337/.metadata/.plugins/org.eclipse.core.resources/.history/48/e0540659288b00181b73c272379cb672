#include "TestMotorSPI.h"
#include "SystemConfigure.h"

//P3.3 SCK(1)   => (2) SSP0_SCK - R39. xanh la
//P3.6 MISO(1)  => (0) GPIO 0[6] - R41 tim
//P3.7 MOSI(1)  => (2) SSPO_MISO  - R40 trang
//P3.8 CS(4) - GPIO 5(11) => (2)SSPO -MOSI

#define SCK_PORT                    (0x1)
#define SCK_PIN                     (19)

#define MISO_PORT                   (0x1)
#define MISO_PIN                    (3)

#define MOSI_PORT                   (0x1)
#define MOSI_PIN                    (4)

#define CS1_PORT                     (0x1)
#define CS1_PIN                      (5)
#define CS1_GPIO_PORT                (1)
#define CS1_GPIO_PIN                 (8)

#define CS2_PORT                     (0x1)
#define CS2_PIN                      (6)
#define CS2_GPIO_PORT                (1)
#define CS2_GPIO_PIN                 (9)

#define CS3_PORT                     (0x1)
#define CS3_PIN                      (7)
#define CS3_GPIO_PORT                (1)
#define CS3_GPIO_PIN                 (0)

#define CS4_PORT                     (0x1)
#define CS4_PIN                      (8)
#define CS4_GPIO_PORT                (1)
#define CS4_GPIO_PIN                 (1)

#define LPC_SSP           LPC_SSP1
#define SSP_IRQ           SSP0_IRQn
#define SSP_BIT_RATE                (1500000)

#define CLK0                        (0)

TestMotorSPI *TestMotorSPI::S_Instance = NULL;

void delay_HardDelay(unsigned long ms)
{
#define SYSTEM_FRE_KHZ          (204000)
#define CYCLE_PER_INSTRUCTION   (4)
#define INSTRUCTION_FRE_KHZ     (SYSTEM_FRE_KHZ/CYCLE_PER_INSTRUCTION)
    for(long i = 0; i < ms; i++)
    {
        for(long j = 0; j < INSTRUCTION_FRE_KHZ; j++)
            asm("nop"); //do nothing
    }
}

void TestMotorSPI::TestMotorSPICreateTask (void)
{
    xTaskCreate(Entry, "TestMotorSPI", HFOSPI_TASK_SIZE, NULL,
                HFOSPI_TASK_PRIORITY, (TaskHandle_t *) NULL);
}


TestMotorSPI* TestMotorSPI::S_GetInstance (void)
{
    //Create object if it is null
    if (S_Instance == NULL)
    {
        S_Instance = new TestMotorSPI();
    }
    //check object is null or not
    ASSERTION(S_Instance != NULL);

    return(S_Instance);
}

void TestMotorSPI::Init (void)
{
    //Initialize for SPI
    //PIN SCK
    Chip_SCU_PinMuxSet(SCK_PORT, SCK_PIN, (SCU_PINIO_FAST |SCU_MODE_FUNC1));
    //PIN MISO
    Chip_SCU_PinMuxSet(MISO_PORT, MISO_PIN, (SCU_PINIO_FAST |SCU_MODE_FUNC5));
    //PIN MOSI
    Chip_SCU_PinMuxSet(MOSI_PORT, MOSI_PIN, (SCU_PINIO_FAST |SCU_MODE_FUNC5));

    //PIN CS
    Chip_SCU_PinMuxSet(CS1_PORT, CS1_PIN, (SCU_PINIO_FAST |SCU_MODE_FUNC0));
    Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, CS1_GPIO_PORT, CS1_GPIO_PIN);

    Chip_SCU_PinMuxSet(CS2_PORT, CS2_PIN, (SCU_PINIO_FAST |SCU_MODE_FUNC0));
    Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, CS2_GPIO_PORT, CS2_GPIO_PIN);

    Chip_SCU_PinMuxSet(CS3_PORT, CS3_PIN, (SCU_PINIO_FAST |SCU_MODE_FUNC0));
    Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, CS3_GPIO_PORT, CS3_GPIO_PIN);

    Chip_SCU_PinMuxSet(CS4_PORT, CS4_PIN, (SCU_PINIO_FAST |SCU_MODE_FUNC0));
    Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, CS4_GPIO_PORT, CS4_GPIO_PIN);

    //Set PIN to HIGH - default
    Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS1_GPIO_PORT, CS1_GPIO_PIN,true);
    Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS2_GPIO_PORT, CS2_GPIO_PIN,true);
    Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS3_GPIO_PORT, CS3_GPIO_PIN,true);
    Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS4_GPIO_PORT, CS4_GPIO_PIN,true);

    //power for motor
    Chip_SCU_PinMuxSet(0x2, 2, (SCU_PINIO_FAST |SCU_MODE_FUNC4));
    Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, 5, 2);
    Chip_GPIO_WritePortBit(LPC_GPIO_PORT,5, 2, true);

    // initialize SSP
    Chip_SSP_Init(LPC_SSP);
    Chip_SSP_SetMaster(LPC_SSP, true);
    Chip_SSP_SetBitRate(LPC_SSP, SSP_BIT_RATE);
    Chip_SSP_SetFormat(LPC_SSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_MODE3);
    Chip_SSP_Enable(LPC_SSP);
    Chip_SSP_Int_Enable(LPC_SSP);   /* enable interrupt */


    //set up clock out put = CLKIN_MAINPLL/ 12
    //initialize function for CLK0 pin
    Chip_SCU_ClockPinMuxSet(CLK0, SCU_MODE_FUNC1);

    Chip_Clock_SetDivider(CLK_IDIV_E, CLKIN_MAINPLL, 17);
    Chip_Clock_SetBaseClock(CLK_BASE_OUT, CLKIN_IDIVE, true, false);

}
static void motor_init(uint8_t MotorID)
{
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0x84,0x4440006B); //A: 26x-SPI, B: 26x-S/D
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xB1,0x00B71B00); // clk 7A1200/8Mhz, 0x00F42400/16Mhz 1036640 /17MHz b71b00/12m
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0x80,0x00006026); // direct-a, direct-bow
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0x90,0x00010001); // Steplength

    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xEC,0x00000000); // Using cover datagram to write to DRVCTRL of TMC26x  sendData           (0xEC,0x00000000)
                               // single edge steps, disable step interpolation, microstep resolution: 256
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xEC,0x00091935); // Using cover datagram to write to CHOPCONF of TMC26x                    (0xEC,0x00090585)
                               // tbl=36, standard chopper, HDEC=16, HEND=11, HSTR=1, TOFF=5, RNDTF=off
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xEC,0x000A0000); // Using cover datagram to write to SMARTEN of TMC26x                     (0xEC,0x000A0000)

    if(MotorID == 1)
    {
        // Disable Smarten Register
        TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xEC,0x000D0519); // Using cover datagram to write to SGCSCONF of TMC26x 06 for small motor                   (0xEC,0x000C0018)
    }
    else
    {
        // Disable Smarten Register
        TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xEC,0x000D0506); // Using cover datagram to write to SGCSCONF of TMC26x 06 for small motor                   (0xEC,0x000C0018)
    }

                               // SGT=0,CS=24
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xEC,0x000EF040); // Using cover datagram to write to DRVCONF of TMC26x                     (0xEC,0x000EF000)
                               // SLPH = 3, SLPL = 3, DISS2G = off, TS2G = 0-3.2Âµs, SDOFF = on, VSENSE = 0

    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xA4,0x00000000); // v = 0
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xA1,0x00000000); // xactual = 0
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xB7,0x00000000); // xtarget = 0

    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xA0,0x00000004); // S-Ramp + POS Mode 6 RAM  4 NO RAM 5  0 - mode vector
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xA4,0x0249F000); // VMAX =  [pps] 03E80000 200K / 186a0=100k
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xA8,0x00001000); // AMAX
    TestMotorSPI::S_GetInstance()->sendData2(MotorID, 0xA9,0x00001000); // DMAX
}


void TestMotorSPI::Entry (void* pvParameters)
{
    const int FOREVER = 1;

    motor_init(1);
    motor_init(2);
    motor_init(3);
    motor_init(4);

    static bool status = true;


    while(FOREVER)
    {
        DEBUG_HFO("HFO==============\n");

        status = !status;

        if(status){
        TestMotorSPI::S_GetInstance()->sendData2(1, 0xB7,0x00001000); // xtarget = 0
        TestMotorSPI::S_GetInstance()->sendData2(2, 0xB7,0x00001000); // xtarget = 0
        TestMotorSPI::S_GetInstance()->sendData2(3, 0xB7,0x00001000); // xtarget = 0
        TestMotorSPI::S_GetInstance()->sendData2(4, 0xB7,0x00001000); // xtarget = 0
        }
        else
        {


        TestMotorSPI::S_GetInstance()->sendData2(1, 0xB7,0x00000000); // xtarget = 0
        TestMotorSPI::S_GetInstance()->sendData2(2, 0xB7,0x00000000); // xtarget = 0
        TestMotorSPI::S_GetInstance()->sendData2(3, 0xB7,0x00000000); // xtarget = 0
        TestMotorSPI::S_GetInstance()->sendData2(4, 0xB7,0x00000000); // xtarget = 0
        }










        vTaskDelay(200/portTICK_PERIOD_MS);
    }
}

void TestMotorSPI::sendData2 (uint8_t MotorId, uint8_t address, uint32_t datagram)
{
    //TMC4361 takes 40 bit data: 8 address and 32 data
    uint8_t i_datagram;

    switch (MotorId)
    {
        case 1:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS1_GPIO_PORT, CS1_GPIO_PIN, false);
            break;

        case 2:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS2_GPIO_PORT, CS2_GPIO_PIN, false);
            break;

        case 3:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS3_GPIO_PORT, CS3_GPIO_PIN, false);
            break;

        case 4:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS4_GPIO_PORT, CS4_GPIO_PIN, false);
            break;

        default:
            break;
    }
    delay_HardDelay(10);

    //send address byte
    Chip_SSP_WriteFrames_Blocking(LPC_SSP, &address, 1);

    //send datagram
    i_datagram = (uint8_t)((datagram >> 24) & 0xff);
    Chip_SSP_WriteFrames_Blocking(LPC_SSP, &i_datagram, 1);
    DEBUG_HFO("%x ", i_datagram);

    i_datagram = (uint8_t)((datagram >> 16) & 0xff);
    Chip_SSP_WriteFrames_Blocking(LPC_SSP, &i_datagram, 1);
    DEBUG_HFO("%x ", i_datagram);

    i_datagram = (uint8_t)((datagram >> 8) & 0xff);
    Chip_SSP_WriteFrames_Blocking(LPC_SSP, &i_datagram, 1);
    DEBUG_HFO("%x ", i_datagram);

    i_datagram = (uint8_t)(datagram & 0xff);
    Chip_SSP_WriteFrames_Blocking(LPC_SSP, &i_datagram, 1);
    DEBUG_HFO("%x \n", i_datagram);

    switch (MotorId)
    {
        case 1:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS1_GPIO_PORT, CS1_GPIO_PIN, true);
            break;

        case 2:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS2_GPIO_PORT, CS2_GPIO_PIN, true);
            break;

        case 3:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS3_GPIO_PORT, CS3_GPIO_PIN, true);
            break;

        case 4:
            Chip_GPIO_WritePortBit(LPC_GPIO_PORT,CS4_GPIO_PORT, CS4_GPIO_PIN, true);
            break;

        default:
            break;
    }

}

TestMotorSPI::TestMotorSPI (void)
{
}
