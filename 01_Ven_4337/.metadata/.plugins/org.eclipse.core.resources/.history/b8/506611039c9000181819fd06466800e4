#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include <cr_section_macros.h>
#include "ProxyFlowSensor.h"
#include "DebugTrace.h"
#include "Delay.h"

void GetDeviceName(void)
{
    ProxySensorSendFrameData GetDeviceName;

    GetDeviceName.Address = 0x00;
    GetDeviceName.CMD = 0xD0;
    GetDeviceName.LengTH = 0x01;
    GetDeviceName.Data[0] = 0x01;

    uint8_t DataToSen[6 + GetDeviceName.LengTH] = {};
    uint32_t SizeofData;

    ProxyFlowSensor::S_GetInstance()->GenerateFrameData(&GetDeviceName, DataToSen, SizeofData);

    for(uint32_t i = 0; i < SizeofData; ++i)
    {
        DEBUG_PROXYFLOWTASK("%x ", DataToSen[i]);
    }
    DEBUG_PROXYFLOWTASK("\n");

    uint8_t Data[] = {};
    uint64_t DSize = 0;

    ProxyFlowSensor::S_GetInstance()->ConvertByteArrayToSend(DataToSen, SizeofData, Data, DSize);

    for(uint32_t i = 0; i < DSize; ++i)
    {
        DEBUG_PROXYFLOWTASK("%x ", Data[i]);
    }
    DEBUG_PROXYFLOWTASK("\n");


//    vTaskSuspendAll();
//    ProxyFlowSensor::S_GetInstance()->SendDataToUART(DataToSen, SizeofData);
    ProxyFlowSensor::S_GetInstance()->SendDataToUART(Data, DSize);
//    xTaskResumeAll();

    uint8_t cmd[32]= {0};
    int num = ProxyFlowSensor::S_GetInstance()->ReadDataFromUART(cmd, 32);

    DEBUG_PROXYFLOWTASK("Read data(%d) \n", num);
    for(int i = 0; i < num; ++i)
    {
        DEBUG_PROXYFLOWTASK("%x ", cmd[i]);
    }

    DEBUG_PROXYFLOWTASK("\n\n ");
    ProxySensorRecFrameData recData;

    if(ProxyFlowSensor::S_GetInstance()->ConvertReceiveDataToFrameData(cmd, num, &recData))
    {
        DEBUG_PROXYFLOWTASK("OK\n");
    }
    else
    {
        DEBUG_PROXYFLOWTASK("BAD\n");
    }
}


int main(void) {

#if defined (__USE_LPCOPEN)
    // Read clock settings and update SystemCoreClock variable
    SystemCoreClockUpdate();
#if !defined(NO_BOARD_LIB)
#if defined (__MULTICORE_MASTER) || defined (__MULTICORE_NONE)
    // Set up and initialize all required blocks and
    // functions related to the board hardware
    Board_Init();
#endif
#endif
#endif

    ProxyFlowSensor::S_GetInstance()->Init();


    while(1)
    {
        GetDeviceName();
//        delay_ms(2);
    }
    return 0 ;
}
